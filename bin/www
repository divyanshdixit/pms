#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pms:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

var users = [];
var connectedUser = 0;

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// 
io.on('connection', function(socket){

  // send message for single user
  socket.emit('message', 'Welcome user');

  // send broadcasting message when user is connecting (it'll send the user except the user which is connecting)
  
  socket.broadcast.emit('message', 'User is connecting!');

  connectedUser++;

  socket.on('setusername', function(data){
    if(users.indexOf(data) > -1){
      socket.emit('userExists', data + ' Username is already taken. Please choose other.')
    }else{
      users.push(data);
      socket.emit('userSet', {username:data, usernumber:users.length})
    }
  })

  socket.on('msg', function(data){
    io.emit('newmsg', data)
    
  })

  socket.on('filesend', function(data){
    io.sockets.emit('newfilesend', data);
  })

  // send user and status
  socket.on('userStatus', function(data){
    console.log(data);
    io.emit('newUserStatus', data)
  })

  socket.on('disconnect', function(){
    // everyone should know user has left the chat
    io.emit('message', 'User is disconnecting!')
    connectedUser--;

  })
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}